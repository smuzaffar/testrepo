#!/usr/bin/env perl
#
# $Id $
###########################################################################
#  simple little script to make TSelector skeletons
# 
#  execution:  mktsel tselectorname
# 
#  output:  tselectorname/
#                         Buildfile
#                         interface/
#                         src/tselectorname.cc
#                         src/tselectorname.h
#                         src/classes.h
#                         src/classes_def.xml
#                         doc/
#                         test/
#  required input:
# 
#  tselectorname = name of the tselector
# 
#  optional input:
# 
#  none
# 
#  example:
#  mktsel MySel 
#        --> write  MySel/
#                         Buildfile
#                         interface/
#                         src/MySel.cc
#                         src/MySel.h
#                         src/classes.h
#                         src/classes_def.xml
#                         doc/
#                         test/
#  
#   the script tries to read in
#   a filename .tmpl in users HOME directory which contains the following lines
#             First : your first name
#             Last : your last name
#   if .tmpl is not found and firstname and lastname are blank the
#   enviroment variable LOGNAME is used to obtain the "real life" name
#   from the output of finger.
#
#   Enviroment variable CMS_SKEL may point to a directory that
#   contains the skeleton files.
#
#   mktsel will not overwrite existing files
#
#   Skeleton Keywords (Case matters):
#      tselname :  overwritten with routine name
#      John Doe  :  overwritten with author's name
#      day-mon-xx:  overwritten with todays date
#      RCS(key)  :  becomes $key$
#
#   author of the script: Chris Jones
#                         (based on scripts used by the CLEO experiment)
#   
###########################################################################


#  if the routine name is blank, 'h' or '?' go to help
$name = "";
$author1 = "";
$author2 = "";
$recordname = "";

$commandFullPath = $0;

use FindBin;
use lib "$FindBin::Bin";

&read_args(@ARGV);

use SkelParser;

# environment variables
$home = $ENV{"HOME"};
$skel_dir = &find_mkTemplate_dir($commandFullPath);


$skeletons{"$skel_dir/TSelector/tselector.cc"} =
    "$name/src/" . $name . '.cc';
$skeletons{"$skel_dir/TSelector/tselector.h"} =
    "$name/src/" . $name . '.h';
$skeletons{"$skel_dir/TSelector/BuildFile.temp"} =
    "$name/BuildFile";
$skeletons{"$skel_dir/TSelector/classes.h"} =
    "$name/src/classes.h";
$skeletons{"$skel_dir/TSelector/classes_def.xml"} =
    "$name/src/classes_def.xml";

if ( ! $do_list )
{
    # create the directories
    &mk_package_structure( $name );

    #based on the current directory, find the 'subsystem'
    my $gSUBSYS = "";
    ($gROOT, $gSUBSYS) = &grandparent_parent_dir;

    #define special substitution rules
    my @subs  = ( "s/tselname/$name/g",
		  "s/skelsubsys/$gSUBSYS/g",
		  "s/TSELNAME/\\U$name/g" );
    

    # make the source files from the skeletons
    foreach $skeleton_key ( keys(%skeletons) )
    {
	&make_file($skeleton_key, $skeletons{$skeleton_key}, \@subs, \@magic_tokens, $author1, $author2 );
    }
}
else
{
    &list_tokens;
    exit 0;
}

# read the command line arguments
sub read_args
{
    while ( @_ )
    {
	$curr_arg = shift @_;
	if ( $curr_arg eq "\?" 
	    || $curr_arg eq "h" 
	    || $curr_arg eq "-h" 
	    || $curr_arg eq "-help" )
	{
	    &wrt_help; 
	}
        elsif ( $curr_arg eq "-list" )
        {
          $do_list = 1;
        }
	elsif ( $curr_arg eq "-skeldir" )
	{
	    $next_arg = shift @_;
	    die "$next_arg is not a directory\n"
		unless ( -d $next_arg );
	    $skel_dir = $next_arg;
	}
	elsif ( $curr_arg eq "-author" )
	{
	    $next_arg = shift @_;
	    $author1 = $next_arg;
	    $next_arg = shift @_;
	    $author2 = $next_arg;
	}
	elsif ( $curr_arg =~ /^\w+$/ )
	{
	    if ( ! $name )
	    {
		$name = $curr_arg;

		# Names must begin with capital letters.
		if ( ! ( $name =~ /^[A-Z]/ ) )
		{
		    print "
mktsel  E: ESAnalyzer names must begin with capital letters, and each
mktsel  E: separate 'word' in the name should also start with a capital
mktsel  E: letter.  For example, MyTrackingTestAnalyzer is a valid name,
mktsel  E: but myTrackingTestAnalyzer and MyTrackingtestAnalyzer are not.\n\n";
		    exit 1;
		}
	    }
	}
	elsif ( $curr_arg =~ /^-(\w+)=?(\w*)$/ )
	{
	    push(@magic_tokens,$1);
	    if( $2 ) {
		$magic_values{$1}=$2;
	    }
	}
	else
	{
	    &wrt_help;
	}
    }
    &wrt_help unless ( ( $name ) || $do_list );
}


# help package
sub wrt_help {

    print <<'ENDHELP';
mktsel  h: simple little script to make analyzer skeletons
mktsel  h:
mktsel  h: execution:  mktsel tselectorname [options]
mktsel  h:
mktsel  h: output:  tselectorname/
mktsel  h:                       BuildFile
mktsel  h:                       interface/
mktsel  h:                       src/tselectorname.cc
mktsel  h:                       doc/
mktsel  h:                       test/
mktsel  h:
mktsel  h: required input:
mktsel  h:
mktsel  h: tselectorname = name of the analyzer
mktsel  h:
mktsel  h: optional input:
mktsel  h:
mktsel  h:   -<example type> = generate example code for a specific type
mktsel  h:                     of data
mktsel  h:   -list = list the example types currently known
mktsel  h:
mktsel  h:   -author firstname lastname
mktsel  h:
mktsel  h: example:
mktsel  h: mktsel MyAnalyzer
mktsel  h:       --> write  MyAnalyzer/
mktsel  h:                              BuildFile
mktsel  h:                              interface/
mktsel  h:                              src/MyAnalyzer.cc
mktsel  h:                              doc/
mktsel  h:                              test/
ENDHELP

    print "mktsel  Q: Please enter analyzer name [<return> exits]: ";
$_ = <STDIN>;
chop;
exit 0 unless $_;
@ARGV = split;
&read_args(@ARGV);

}

sub list_tokens
{
  print "known example types:\n";
  foreach $skeleton_key ( keys(%skeletons) )
  {
# /Makefile.temp is a special case, since we use $C3_GMAKE/M.processor
# as our skeleton
    open( LISTFILE, $skeleton_key ) ||
    die "Can't open $skeleton_key\n"
    unless ($skeleton_key eq "/Makefile.temp");
    while(<LISTFILE>)
    {
      if ( /^\@example_(\w+)\b/ )
      {
        my @tokenlist = split '_', $1;
        foreach $token (@tokenlist)
        {
          $tokens{$token} = $token;
        }
      }
    }
  }
  foreach $token (sort(keys(%tokens)))
  {
    print "\t$token\n";
  }
}
