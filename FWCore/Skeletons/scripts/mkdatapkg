#!/usr/bin/env perl
#
# $Id $
###########################################################################
#  simple little script to make event setup package skeletons
# 
#  execution:  mkesprod packagename
# 
#  output:  packagename/
#                         BuildFile.xml
#                         interface/
#                         src/packagename.cc
#                         doc/
#                         test/
#  required input:
# 
#  packagename = name of the package
# 
#  optional input:
# 
#  none
# 
#  example:
#  mkdatapkg MyPackage 
#        --> write  MyPackage/
#                               BuildFile.xml
#                               interface/
#                               src/MyPackage.cc
#                               doc/
#                               test/
#  
#   the script tries to read in
#   a filename .tmpl in users HOME directory which contains the following lines
#             First : your first name
#             Last : your last name
#   if .tmpl is not found and firstname and lastname are blank the
#   enviroment variable LOGNAME is used to obtain the "real life" name
#   from the output of finger.
#
#   Enviroment variable CMS_SKEL may point to a directory that
#   contains the skeleton files.
#
#   mkdatapkg will not overwrite existing files
#
#   Skeleton Keywords (Case matters):
#      prodname  :  overwritten with routine name
#      John Doe  :  overwritten with author's name
#      day-mon-xx:  overwritten with todays date
#      RCS(key)  :  becomes $key$
#
#   author of the script: Chris Jones
#                         (based on scripts used by the CLEO experiment)
#   
###########################################################################


#  if the routine name is blank, 'h' or '?' go to help
$name = "";
$author1 = "";
$author2 = "";
$recordname = "";

use FindBin;
use lib "$FindBin::Bin";

$commandFullPath = $0;

&read_args(@ARGV);

use SkelParser;

# environment variables
$home = $ENV{"HOME"};
$skel_dir = &find_mkTemplate_dir($commandFullPath);


$skeletons{"$skel_dir/DataPkg/classes.h"} =
    "$name/src/classes.h";
$skeletons{"$skel_dir/DataPkg/classes_def.xml"} =
    "$name/src/classes_def.xml";
$skeletons{"$skel_dir/DataPkg/BuildFile.temp"} =
    "$name/BuildFile.xml";

if ( ! $do_list )
{
    # create the directories
    &mk_package_structure( $name );

    #based on the current directory, find the 'subsystem'
    my $gSUBSYS = "";
    ($gROOT, $gSUBSYS) = &grandparent_parent_dir;

    #define special substitution rules
    my @subs  = ( "s/datapkgname/$name/g",
		  "s/skelsubsys/$gSUBSYS/g",
		  "s/DATAPKGNAME/\\U$name/g" );
    

    # make the source files from the skeletons
    foreach $skeleton_key ( keys(%skeletons) )
    {
	&make_file($skeleton_key, $skeletons{$skeleton_key}, \@subs, \@magic_tokens, $author1, $author2 );
    }
}
else
{
    &list_tokens;
    exit 0;
}

# read the command line arguments
sub read_args
{
    while ( @_ )
    {
	$curr_arg = shift @_;
	if ( $curr_arg eq "\?" 
	    || $curr_arg eq "h" 
	    || $curr_arg eq "-h" 
	    || $curr_arg eq "-help" )
	{
	    &wrt_help; 
	}
	elsif ( $curr_arg eq "-skeldir" )
	{
	    $next_arg = shift @_;
	    die "$next_arg is not a directory\n"
		unless ( -d $next_arg );
	    $skel_dir = $next_arg;
	}
	elsif ( $curr_arg eq "-author" )
	{
	    $next_arg = shift @_;
	    $author1 = $next_arg;
	    $next_arg = shift @_;
	    $author2 = $next_arg;
	}
	elsif ( $curr_arg =~ /^\w+$/ )
	{
	    if ( ! $name )
	    {
		$name = $curr_arg;

		# Names must begin with capital letters.
		if ( ! ( $name =~ /^[A-Z]/ ) )
		{
		    print "
mkdatapkg  E: Package names must begin with capital letters, and each
mkdatapkg  E: separate 'word' in the name should also start with a capital
mkdatapkg  E: letter.  For example, MyTestDataPackage is a valid name,
mkdatapkg  E: but myTestDataPackage and MytestDataPackage are not.\n\n";
		    exit 1;
		}
	    }
	}
	elsif ( $curr_arg =~ /^-(\w+)=?(\w*)$/ )
	{
	    push(@magic_tokens,$1);
	    if( $2 ) {
		$magic_values{$1}=$2;
	    }
	}
	else
	{
	    &wrt_help;
	}
    }
    &wrt_help unless ( ( $name ) || $do_list );
}


# help package
sub wrt_help {

    print <<'ENDHELP';
mkdatapkg  h: simple little script to make package skeletons
mkdatapkg  h:
mkdatapkg  h: execution:  mkdatapkg packagename
mkdatapkg  h:
mkdatapkg  h: output:  packagename/
mkdatapkg  h:                       BuildFile.xml
mkdatapkg  h:                       interface/
mkdatapkg  h:                       src/classes.h classes_def.xml
mkdatapkg  h:                       doc/
mkdatapkg  h:                       test/
mkdatapkg  h:
mkdatapkg  h: required input:
mkdatapkg  h:
mkdatapkg  h: packagename = name of the package
mkdatapkg  h:
mkdatapkg  h: optional input:
mkdatapkg  h:
mkdatapkg  h:   -author firstname lastname
mkdatapkg  h:
mkdatapkg  h: example:
mkdatapkg  h: mkdatapkg MyPackage
mkdatapkg  h:       --> write  MyPackage/
mkdatapkg  h:                              BuildFile.xml
mkdatapkg  h:                              interface/
mkdatapkg  h:                              src/classes.h classes_def.xml
mkdatapkg  h:                              doc/
mkdatapkg  h:                              test/
ENDHELP

    print "mkdatapkg  Q: Please enter package name: ";
    $ARGV[0] = <STDIN>;
    chop($ARGV[0]);

}
