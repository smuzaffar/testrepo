#!/usr/bin/env perl
#
# $Id $
###########################################################################
#  simple little script to make event setup package skeletons
# 
#  execution:  mkevhyp packagename event_hypothesis_file
# 
#  output:  packagename/
#                         Buildfile
#                         interface/packagename.h
#                         src/packagename.cc <also modifies:> classes.h classes_def.xml
#                         doc/
#                         test/
#  required input:
# 
#  packagename = name of the package
#  event_hypothesis_file = list of event hypothesis objects
# 
#  optional input:
# 
#  none
# 
#  example:
#  mkevhyp MyPackage zjets.txt
#        --> write  MyPackage/
#                               Buildfile
#                               interface/MyPackage.h
#                               src/MyPackage.cc <also modifies:> classes.h classes_def.xml
#                               doc/
#                               test/
#  
#   the script tries to read in
#   a filename .tmpl in users HOME directory which contains the following lines
#             First : your first name
#             Last : your last name
#   if .tmpl is not found and firstname and lastname are blank the
#   enviroment variable LOGNAME is used to obtain the "real life" name
#   from the output of finger.
#
#   Enviroment variable CMS_SKEL may point to a directory that
#   contains the skeleton files.
#
#   mkdatapkg will not overwrite existing files
#
#   Skeleton Keywords (Case matters):
#      prodname  :  overwritten with routine name
#      John Doe  :  overwritten with author's name
#      day-mon-xx:  overwritten with todays date
#      RCS(key)  :  becomes $key$
#
#   author of the script: Chris Jones
#                         (based on scripts used by the CLEO experiment)
#   
###########################################################################


#  if the routine name is blank, 'h' or '?' go to help
$name = "";
$author1 = "";
$author2 = "";
$recordname = "";

use FindBin;
use lib "$FindBin::Bin";

$commandFullPath = $0;

&read_args(@ARGV);

use SkelParser;

# environment variables
$home = $ENV{"HOME"};
$skel_dir = &find_mkTemplate_dir($commandFullPath);

sub trim($);
sub parse_hypothesis($);
sub modify_file;

$skeletons{"$skel_dir/EventHypothesis/xxxEventHypothesis.h"} =
    "$name/interface/$name.h";
$skeletons{"$skel_dir/EventHypothesis/xxxEventHypothesis.cc"} =
    "$name/src/$name.cc";
$skeletons{"$skel_dir/EventHypothesis/xxxEventHypothesisProducer.h"} =
    "$name/interface/$name"."Producer.h";
$skeletons{"$skel_dir/EventHypothesis/xxxEventHypothesisProducer.cc"} =
    "$name/src/$name"."Producer.cc";

if ( ! $do_list )
{

    #based on the current directory, find the 'subsystem'
    my $gSUBSYS = "";
    ($gROOT, $gSUBSYS) = &grandparent_parent_dir;

    # Get the hypothesis definition from the file.
    # hyptypes contains the object types, and hypnames contains
    # the object names
    &parse_hypothesis($hypfile);

    my $hypcount = 0;
    $hyp_data_members_str = '';
    $hyp_interface_str = '';
    $hyp_cand_roles_str = '';
    $hyp_cand_vector_bools_str = '';
    $hyp_role_switch_str = '';
    $hyp_size_switch_str = '';
    chomp($hyp_data_members_str);
    foreach ( @hyptypes ) {
      # Fill the declaration of types in the header
      $hyp_data_members_str = $hyp_data_members_str . sprintf("%30s %15s\_;\n", @hyptypes{$hypcount}, @hypnames{$hypcount});
      # Fill the accessors
      my $tempname =@hypnames{$hypcount};
      $hyp_interface_str = $hyp_interface_str . 
	sprintf("@hyptypes{$hypcount} & $tempname() { return @hypnames{$hypcount}\_; } \n", @hyptypes{$hypcount}, @hypnames{$hypcount} );
      # Fill the candidate array of names
      $hyp_cand_roles_str = $hyp_cand_roles_str . sprintf("  \"@hypnames{$hypcount}\",  \n");

      # Fill the role dispatcher
      # Two cases here: 
      # 1: regular object... use direct return
      # 2: vector of objects... return element of the vector
      if ( @hyptypes{$hypcount} =~ /vector/ ) {
      $hyp_role_switch_str = 
	$hyp_role_switch_str . 
	  sprintf("if (name == \"@hypnames{$hypcount}\") return @hypnames{$hypcount}\_.at(index);\n" );
      # Fill the array of whether or not the member is a vector
      $hyp_cand_vector_bools_str = $hyp_cand_vector_bools_str . sprintf(" true,  \n");
      # Fill the array of vector sizes
      $hyp_size_switch_str = 
	$hyp_size_switch_str .
	  sprintf("if (name == \"@hypnames{$hypcount}\") return @hypnames{$hypcount}\_.size();\n" );
      } else {
      $hyp_role_switch_str = 
	$hyp_role_switch_str . 
	  sprintf("if (name == \"@hypnames{$hypcount}\") return @hypnames{$hypcount}\_;\n" );
      # Fill the array of whether or not the member is a vector
      $hyp_cand_vector_bools_str = $hyp_cand_vector_bools_str . sprintf(" false,  \n");
      # Fill the array of vector sizes
      $hyp_size_switch_str = 
	$hyp_size_switch_str .
	  sprintf("if (name == \"@hypnames{$hypcount}\") return 1;\n" );
      }
      $hypcount++;
    }
    $nhyp_roles_str = "N_ROLES = $hypcount;";

    my $hypcount2 = 0;

    #define special substitution rules
    my @subs  = ( "s/xxxEventHypothesis/$name/g",
		  "s/skelsubsys/$gSUBSYS/g",
		  "s/PutMyEventHypothesisDataMembersHere;/$hyp_data_members_str/g",
		  "s/PutMyEventHypothesisInterfaceHere;/$hyp_interface_str/g",
		  "s/PutMyListOfCandidateRolesHere/$hyp_cand_roles_str/g",
		  "s/PutMyListOfVectorBoolsHere/$hyp_cand_vector_bools_str/g",
		  "s/PutMyRoleSwitchHere;/$hyp_role_switch_str/g",
		  "s/PutMySizesHere;/$hyp_size_switch_str/g",
		  "s/N_ROLES = 0;/$nhyp_roles_str/g",
		  "s/PutMyDefaultReturnHere/@hypnames{$hypcount2}\_/g");

    $buildfile_includes = "<use name=DataFormats/PatCandidates>\n<use name=DataFormats/Candidate>\n";


    # make the source files from the skeletons
    foreach $skeleton_key ( keys(%skeletons) )
    {
	&make_file($skeleton_key, $skeletons{$skeleton_key}, \@subs );
    }

    # Now define modification rule.
    # This needs to copy the file in situ because the mkdatapkg script
    # makes the classes.h and classes_def.xml in the directory we want.
    # We simlply want to modify the text in there
    &modify_file("$name/src/classes.h",
		 "YOUR_CLASS_GOES_HERE",
		 "$name" );
    &modify_file("$name/src/classes_def.xml",
		 "YOUR_CLASS_GOES_HERE",
		 "pat::$name" );
    &modify_file("$name/src/classes.h",
		 "<$name",
		 "<pat::$name" );
    &modify_file("$name/src/classes.h",
		 "\\\*\/",
		 "\n" );
    &modify_file("$name/src/classes.h",
		 "uncomment_h_here",
		 "\*\/" );
    &modify_file("$name/src/classes_def.xml",
		 "-->",
		 "\n" );
    &modify_file("$name/src/classes_def.xml",
		 "uncomment_xml_here",
		 "  -->" );
    &modify_file("$name/BuildFile",
		 "<use name=rootrflx>",
		 "<use name=rootrflx>\n" . "$buildfile_includes" );

}
else
{
    &list_tokens;
    exit 0;
}

# read the command line arguments
sub read_args
{
    while ( @_ )
    {
	$curr_arg = shift @_;
	if ( $curr_arg eq "\?" 
	    || $curr_arg eq "h" 
	    || $curr_arg eq "-h" 
	    || $curr_arg eq "-help" )
	{
	    &wrt_help; 
	}
	elsif ( $curr_arg eq "-skeldir" )
	{
	    $next_arg = shift @_;
	    die "$next_arg is not a directory\n"
		unless ( -d $next_arg );
	    $skel_dir = $next_arg;
	}
	elsif ( $curr_arg eq "-author" )
	{
	    $next_arg = shift @_;
	    $author1 = $next_arg;
	    $next_arg = shift @_;
	    $author2 = $next_arg;
	}
	elsif ( $curr_arg =~ /^\w+$/ )
	{
	    if ( ! $name )
	    {
		$name = $curr_arg;

		# Names must begin with capital letters.
		if ( ! ( $name =~ /^[A-Z]/ ) )
		{
		    print "
mkevhyp  E: Package names must begin with capital letters, and each
mkevhyp  E: separate 'word' in the name should also start with a capital
mkevhyp  E: letter.  For example, MyTestEventHypothesis is a valid name,
mkevhyp  E: but myTestEventHypothesis and MytestEventHypothesis are not.\n\n";
		    exit 1;
		}
	    }
	}
	elsif ( $curr_arg eq "-hyp" ) {
	  $next_arg = shift @_;
	  $hypfile = $next_arg;
	}
	elsif ( $curr_arg =~ /^-(\w+)=?(\w*)$/ )
	{
	    push(@magic_tokens,$1);
	    if( $2 ) {
		$magic_values{$1}=$2;
	    }
	}
	else
	{
	  print "Unrecognized option\n";
	    &wrt_help;
	}
    }
    &wrt_help unless ( ( $name ) || $do_list );
}


# help package
sub wrt_help {

    print <<'ENDHELP';
mkevhyp  h: simple little script to make event hypothesis skeletons
mkevhyp  h:
mkevhyp  h: execution:  mkevhyp packagename event_hypothesis_file
mkevhyp  h:
mkevhyp  h: output:  packagename/
mkevhyp  h:                       BuildFile
mkevhyp  h:                       interface/packagename.h
mkevhyp  h:                       src/packagename.cc
mkevhyp  h:                       doc/
mkevhyp  h:                       test/
mkevhyp  h:
mkevhyp  h: required input:
mkevhyp  h:
mkevhyp  h: packagename = name of the package
mkevhyp  h: event_hypothesis_file = text file with event hypothesis
mkevhyp  h:
mkevhyp  h: Example of event hypothesis:
mkevhyp  h: muon1 = Muon
mkevhyp  h: muon2 = Muon
mkevhyp  h: muon3 = Muon
mkevhyp  h: muon4 = Muon
mkevhyp  h: jets = vector<Jet>
mkevhyp  h: Z1 = muon1 + muon2
mkevhyp  h: Z2 = muon3 + muon4
mkevhyp  h: H = Z1 + Z2
mkevhyp  h:
mkevhyp  h: optional input:
mkevhyp  h:
mkevhyp  h: none
mkevhyp  h:
mkevhyp  h: example:
mkevhyp  h: mkevhyp MyEventHypothesis
mkevhyp  h:       --> write  MyEventHypothesis/
mkevhyp  h:                              BuildFile
mkevhyp  h:                              interface/MyEventHypothesis.h
mkevhyp  h:                              src/MyEventHypothesis.cc
mkevhyp  h:                              doc/
mkevhyp  h:                              test/
ENDHELP


}



# Perl trim function to remove whitespace from the start and end of the string
sub trim ($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}



sub parse_hypothesis ($)
{
  $yourfile= shift;

  open (FILE, "$yourfile") || die "Can't open '$yourfile': $!\n";
  @tokens = <FILE>;
  close(FILE);

  # SET A COUNT VARIABLE
  @hyptypes = @tokens;
  @hypnames = @tokens;
  my $count = 0;

  foreach $k (@tokens) {
    my $string = $k;
    chomp($string);
    my ($variable1, $variable2) = split(/=/,$string);
    @hyptypes{$count} = trim($variable2);
    @hypnames{$count} = trim($variable1);
    $count++;
  }


  return ( \@hyptypes, \@hypnames );
}



sub modify_file {

  undef $/;

  # this is the file to be modified
  my $file = $_[0];
  # this is the string to replace
  my $original = $_[1];
  # this is the changed string
  my $replacement = $_[2];

  if (! open(INPUT,"<$file") ) {
    print STDERR "Can't open input file $file\n";
    next;
  }

  # Read input file as one long record.
  my $data=<INPUT>;
  close INPUT;

  if ($data =~ s/$original/$replacement/g) {
    if (! open(OUTPUT,">$file") ) {
      die "Can't open output file $file\n";
    }
    print OUTPUT $data;
    close OUTPUT;
    print STDERR "$file changed\n";
  }
  else {  print STDERR "$file not changed\n"; }
}
