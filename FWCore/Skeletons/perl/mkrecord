#!/usr/local/bin/perl
#
# $Id: mkrecord,v 1.1 2005/06/09 00:17:44 chrjones Exp $
###########################################################################
#  simple little script to make record skeleton files
#
#   execution:  mkrecord recordname (flag firstname lastname)  
#                               last three arguments are optional  
#
#   options:
#               -h, --help                Print a short help page
#               -p, --package=PACKAGE     Package name
#   output:  interface/recordname.h src/recordname.cc
#   
#   required input:
#
#   recordname = name of record
#
#   optional input:
#
#   examples:
#       mkrecord test    --> writes files interface/test.h src/test.cc
#      
#   firstname = author's first name (optional) 
#   lastname = author's last name (optional)
#  
#   if firstname and lastname are blank, the script tries to read in
#   a filename .tmpl in users HOME directory which contains the following lines
#             First : your first name
#             Last : your last name
#   if .tmpl is not found and firstname and lastname are blank the
#   enviroment variable LOGNAME is used to obtain the "real life" name
#   from the output of finger.
#
#   Enviroment variable CMS_SKEL may point to a directory that
#   contains the skeleton files.
#
#   mkskel will not overwrite existing files
#
#   Skeleton Keywords (Case matters):
#      skelname  :  overwritten with routine name
#      John Doe  :  overwritten with author's name
#      day-mon-xx:  overwritten with todays date
#      nocap     :  denotes lines not to be CAPITALIZED upon output
#      RCS(key)  :  becomes $key$
#
#   author of the script: Chris Jones (adapted from Arne Freyberger CLEO code)
#   
###########################################################################

use English;
#use strict;
use Getopt::Long;

my $gPACKAGE = "";
my $gSUBSYS = "";
$commandFullPath = $0;

sub parseFile 
{

    my $recordName = shift;
    my $extension = shift;

    my $skeleton = "$skel_dir/Record/record.";
    $skeleton .= $extension;
    my $outfile = $recordName;
    $outfile .= '.' . $extension;

    print "mkrecord  I: using skeleton: $skeleton \n";
    print "mkrecord  I: creating file: $outfile \n";

#open the skeleton file and output file
    open(IN,$skeleton)    or die "Opening $skeleton: $!\n";
    open(OUT,">$outfile") or die "Opening $outfile: $!\n";

# loop over lines in "skeleton" and overwrite where neccessary
    while(<IN>) {
#  Preserve case for lowercase
	s/skelname/$name/g;
	s/skelpackage/$gPACKAGE/g;
	s/skelsubsys/$gSUBSYS/g;
#  Map uppercase to uppercase
	s/SKELNAME/\U$name/g;
	s/SKELPACKAGE/\U$gPACKAGE/g;
	s/SKELSUBSYS/\U$gSUBSYS/g;
	s/John Doe/$author/;
	s/day-mon-xx/$now/;
#  Handle RCS keywords
	s/RCS\((\w+)\)/\$$1\$/g;
#  write out fortran comment lines without upcasing
	if (/^c/ || /^C/ || /^\*/) {
	    print OUT $_;
	} elsif (/^nocap/) {
#  write out "code lines" upcased unless flagged by "nocap"
	    s/nocap//;
	    print OUT $_;
	} else {
	    print OUT "\U$_";
	}
    }
    close(IN);   
    close(OUT);
    if ($flag =~ /[bpC]/) {
	chmod(0755,$outfile);
    }

}
my $gHELP = 0;

# does not work with old version...
# Getopt::Long::Configure("pass_through");
# old deprecated Getopt::Long::config("pass_through");
GetOptions(
	   "package=s" => \$gPACKAGE,
           "subsys=s" => \$gSUBSYS,
	   "help" => \$gHELP
	   );

#based on the current directory, find the 'package' and 'subsystem'
my $cwd;
chomp($cwd = `pwd`);
print "$cwd";
($gSUBSYS,$gPACKAGE) = ($cwd =~ m!/([^/]*)/([^/]*)/[^/]*$!);

print "$gPACKAGE";

#  if then routine name is blank, 'h' or '?' go to help
if ($gHELP || $ARGV[0] !~ /\w/ || $ARGV[0] eq "\?" || $ARGV[0] eq "h") {
   &wrt_help; 
}

$author1 = "\u$ARGV[2]";
$author2 = "\u$ARGV[3]";

#  users home directory
$home = $ENV{"HOME"};

#  skeleton file directory
$skel_dir = $ENV{"CMS_SKEL"};
if( ! $skel_dir ) {
    use File::Basename;
    print "$commandFullPath"; print;
    $skel_dir = dirname($commandFullPath);
}

# process filename and flag
$name = $ARGV[0];

#$skeleton = "$skel_dir/record.h";

$outfile = $name;
$outfile .= '.' . "h";

#
if (-s "$outfile") {
    print "mkskel  W: $outfile FILE ALREADY EXISTS WILL NOT OVERWRITE!!\n";
    print "mkskel  W: *****************************************************\n";
} 
$outfile = $name;
$outfile .= '.' . "cc";
if (-s "$outfile" ) {
    print "mkskel  W: $outfile FILE ALREADY EXISTS WILL NOT OVERWRITE!!\n";
    print "mkskel  W: *****************************************************\n";
} 
else {
#  get the current date
    $now = `date`;
    chop($now);

# package name
    if (!$gPACKAGE) {
	$gPACKAGE = "package";
    }

    if (!$gSUBSYS) {
	$gSUBSYS = "subsystem";
    }
# get authors name from $HOME/.tmpl file

    $afrom = "command line";
    if ($author1 eq "" && -s "$home/.tmpl") {
	open(IN,"$home/.tmpl");
	$afrom = "users .tmpl file";
	while(<IN>) {
	    if (/First\w*/) {
		@words = split(/:/, $_);
		$author1 = $words[1]; 
		chop($author1);
	    } elsif (/Last\w*/) {
		@words = split(/:/, $_);
		$author2 = $words[1];
		chop($author2);
	    }
	}
	close(IN);
	$author = "$author1 $author2";
    }
#
# if author is still blank fill it in with REAL LIFE name in finger output
#
    if ($author1 eq "") {
	$author1 = $ENV{"LOGNAME"};
	foreach $_ (`finger "$author1"`) {
	    if (/Login n\w*/) {
		@words = split(/: /, $_);
		$author = $words[2];
		chop($author);
		$afrom = "the output finger cmnd";
	    }
	}
    }
#   write out some stuff to the screen
    print "mkrecord  I: authors name is: $author, determined by $afrom \n";
    parseFile($name, "h");
    parseFile($name, "cc");
}

# help package
sub wrt_help {

    print <<'ENDHELP';
mkskel  h: simple little script to make fortran skeletons and include skeletons
mkskel  h:
mkskel  h: execution:  mkskel routinename (flag firstname lastname)  
mkskel  h:                        last three arguments are optional
mkskel  h: options:
mkskel  h:          -h, --help                Print a short help page
mkskel  h:          -p, --package=PACKAGE     Package name
mkskel  h:
mkskel  h: output:  routine.F  or routine.inc (depends on flag)
mkskel  h:
mkskel  h: required input:
mkskel  h:
mkskel  h: routine = name of the subroutine or include file
mkskel  h:
mkskel  h: optional input:
mkskel  h:
mkskel  h: flag = fbr (default)
mkskel  h:    flag = f  fortran skeleton (default)
mkskel  h:           b  bourne shell script skeleton
mkskel  h:           c  c++ skeleton
mkskel  h:           h  c++ header skeleton
mkskel  h:           i  fortran INCLUDE file skeleton
mkskel  h:           p  perl script skeleton
mkskel  h:           w  html skeleton
mkskel  h:           C  csh script skeleton
mkskel  h:           t  Tcl script skeleton (not implimented yet)
mkskel  h: examples:
mkskel  h: mkskel test    --> write  test.F 
mkskel  h: mkskel test i  --> write  test.inc 
mkskel  h:
ENDHELP

    print "mkskel  Q: Please enter file or routine name: ";
    $ARGV[0] = <STDIN>;
    chop($ARGV[0]);
    print "mkskel  Q: Flag [f, b, c, h, i, p, w, C or t] ? ";
    $ARGV[1] = <STDIN>;
    chop($ARGV[1]);
}
