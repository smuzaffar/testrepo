#ifndef Framework_HCMethods_icc
#define Framework_HCMethods_icc
// -*- C++ -*-
//
// Package:     <HeteroContainer>
// Module:      HCMethods
// 
// Description: <one line class summary>
//
// Implementation:
//     <Notes on implementation>
//
// Author:      Chris D. Jones
// Created:     Sun Sep 20 16:03:32 EDT 1998
// $Id: HCMethods.icc,v 1.4 2005/09/01 05:27:19 wmtan Exp $
//
// Revision history
//
// $Log: HCMethods.icc,v $
// Revision 1.4  2005/09/01 05:27:19  wmtan
// Fix Rules violations found by RuleChecker
//
// Revision 1.3  2005/07/14 22:50:52  wmtan
// Rename packages
//
// Revision 1.2  2005/06/23 19:59:30  wmtan
// fix rules violations found by rulechecker
//
// Revision 1.1  2005/05/29 02:29:53  wmtan
// initial population
//
// Revision 1.2  2005/04/06 19:46:26  chrjones
// fixed typo
//
// Revision 1.1  2005/03/28 15:03:30  chrjones
// first submission
//
// Revision 1.3  2002/06/04 18:23:17  cleo3
// replaced SUNCC switch with STATIC_LOCAL_VARIABLE_IN_TEMPLATE_FUNC_BUG
//
// Revision 1.2  1998/10/20 18:06:36  cdj
// modified so .cc file can not be multiply included
//
// Revision 1.1.1.1  1998/09/23 14:13:12  cdj
// first submission
//

// system include files

// user include files
#include "FWCore/Framework/interface/HCMethods.h"
#include "FWCore/Framework/interface/HCTypeTagTemplate.h"

namespace edm {
   namespace eventsetup {
      namespace heterocontainer {
         template< class Type, class Key, class IdTag >
         Key makeKey(const IdTag& iIdTag) {
            static HCTypeTag< Key > typeTag = HCTypeTagTemplate<Type, Key>();
            return Key(typeTag, iIdTag);
         }
         
         template< class Type, class Key>
         Key makeKey() {
            static HCTypeTag< Key > typeTag = HCTypeTagTemplate<Type, Key>();
            return Key(typeTag);
         }
         
         
         template<class Key, class ItemType, class Storage, class IdTag >
         bool insert(Storage& iStorage, ItemType* iItem, const IdTag& iIdTag) {
            return iStorage.insert(makeKey< typename type_from_itemtype<Key, ItemType>::Type, 
                                    Key>(iIdTag) , iItem);
         }
         
         template<  class Key, class ItemType, class Storage>
         bool insert(Storage& iStorage, ItemType* iItem) {
            return iStorage.insert(makeKey<ItemType,
                                    Key>() , iItem);
         }
         
         
         template< class Key, class ItemType, class Storage, class IdTag >
         ItemType* find(const Storage& iStorage, const IdTag& iIdTag) {
            //The cast should be safe since the Key tells us the type
            return (ItemType*) iStorage.find(
                                                makeKey<typename type_from_itemtype<Key,
                                                ItemType>::Type,Key>(iIdTag));
         }
         
         template< class Key, class ItemType, class Storage>
         ItemType* find(const Storage& iStorage) {
            //The cast should be safe since the Key tells us the type
            return (ItemType*) iStorage.find(
                                                makeKey<typename type_from_itemtype<Key,
                                                ItemType>::Type,Key>());
         }
      }
   }
}
#endif
