#ifndef EDMCONTEXT_RECORDGETIMPLEMENTATION_TCC
#define EDMCONTEXT_RECORDGETIMPLEMENTATION_TCC

// -*- C++ -*-
//
// Package:     CoreFramework
// Class  :     recordGetImplementation
// 
// Implementation:
//     <Notes on implementation>
//
// Author:      Chris Jones
// Created:     Fri Apr  1 15:29:14 EST 2005
// $Id: recordGetImplementation.icc,v 1.1 2005/04/02 14:18:01 chrjones Exp $
//

// system include files

// user include files
#include "FWCore/CoreFramework/interface/recordGetImplementation.h"
#include "FWCore/CoreFramework/interface/DataKey.h"
#include "FWCore/CoreFramework/interface/DataProxyTemplate.h"
#include "FWCore/CoreFramework/interface/NoProxyException.h"

namespace edm {
   namespace eventsetup {
template < typename RecordT, typename T > 
void recordGetImplementation( const RecordT& iRecord ,
                              T const *& iData ,
                              const char* iName ) {
   DataKey key(DataKey::makeTypeTag<T>(),
               iName,
               DataKey::kDoNotCopyMemory);
   
   const DataProxyTemplate<RecordT, T>* proxy = 
      static_cast<const DataProxyTemplate<RecordT, T>* >( iRecord.find(key) );
   
   const T* hold = 0;
   if( 0 != proxy ) {
      // add data key to the stack
      //DAExceptionStackEntry stackEntry(d_key);
      
      hold = proxy->get( iRecord, key );
   } else {
      // add durable data key to the stack in order to catch it
      //DAExceptionStackEntry stackEntry(d_key,DAExceptionStackEntry::kUseDurable)
      ;
      
      throw NoProxyException<T>(iRecord, key );
   }
   iData = hold;
}
   }
}
#endif /* EDMCONTEXT_RECORDGETIMPLEMENTATION_TCC */
