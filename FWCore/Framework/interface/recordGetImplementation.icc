#ifndef Framework_recordGetImplementation_icc
#define Framework_recordGetImplementation_icc

// -*- C++ -*-
//
// Package:     Framework
// Class  :     recordGetImplementation
// 
// Implementation:
//     <Notes on implementation>
//
// Author:      Chris Jones
// Created:     Fri Apr  1 15:29:14 EST 2005
// $Id: recordGetImplementation.icc,v 1.10 2007/12/20 00:26:03 chrjones Exp $
//

// system include files

// user include files
#include "FWCore/Framework/interface/EventSetupRecordImplementation.h"
#include "FWCore/Framework/interface/DataKey.h"
#include "FWCore/Framework/interface/DataProxyTemplate.h"
#include "FWCore/Framework/interface/NoProxyException.h"
#include "FWCore/Framework/interface/ComponentDescription.h"
#include <iostream>


namespace edm {
   namespace eventsetup {
      template <typename T>
      template < typename DataT > 
      void 
      EventSetupRecordImplementation<T>::getImplementation(DataT const *& iData ,
							   const char* iName,
							   const ComponentDescription*& iDesc) const 
      {
	 DataKey dataKey(DataKey::makeTypeTag<DataT>(),
			 iName,
			 DataKey::kDoNotCopyMemory);
	 
	 const DataProxyTemplate<T, DataT>* proxy = 
	    static_cast<const DataProxyTemplate<T, DataT>* >(this->find(dataKey));
	 
	 const DataT* hold = 0;
	 
	 if(0!=proxy) {
	    try{
	       hold = proxy->get(static_cast<const T&>(*this), dataKey);
	       iDesc = proxy->providerDescription();
	       
	    } catch(cms::Exception& e) {
               addTraceInfoToCmsException(e,iName,proxy->providerDescription(), dataKey);
               //NOTE: the above function can't do the 'throw' since it causes the C++ class type
               // of the throw to be changed, a 'rethrow' does not have that problem
               throw;
	    } catch(std::exception& e){
               changeStdExceptionToCmsException(e.what(),iName,proxy->providerDescription(),dataKey);
	    }
	 }else{
	    throw NoProxyException<DataT>(*this, dataKey);
	 }
	 iData = hold;
      }
   }
}
#endif
