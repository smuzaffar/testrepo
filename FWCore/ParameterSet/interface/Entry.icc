// ----------------------------------------------------------------------
// $Id: Entry.icc,v 1.1 2005/05/29 02:29:54 wmtan Exp $
//
// declaration of non-intrusive interface to Entry type's values
// ----------------------------------------------------------------------


// ----------------------------------------------------------------------
// prolog

#ifndef  ENTRY_T_H
#define  ENTRY_T_H


// ----------------------------------------------------------------------
// prerequisite source files and headers

#include "FWCore/ParameterSet/interface/Entry.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include <string>
#include <vector>


// ----------------------------------------------------------------------
// contents

namespace edm {
  template< class T >
    T get( Entry const& );

  // specializations for each known data type
  template<>
    bool get<bool>( Entry const& );
  template<>
    std::vector<bool> get<std::vector<bool> >( Entry const& );
  template<>
    int get<int>( Entry const& );
  template<>
    std::vector<int> get<std::vector<int> >( Entry const& );
  template<>
    unsigned get<unsigned>( Entry const& );
  template<>
    std::vector<unsigned> get<std::vector<unsigned> >( Entry const& );
  template<>
    double get<double>( Entry const& );
  template<>
    std::vector<double> get<std::vector<double> >( Entry const& );
  template<>
    std::string get<std::string>( Entry const& );
  template<>
    std::vector<std::string> get<std::vector<std::string> >( Entry const& );
  template<>
    ParameterSet get<ParameterSet>( Entry const& );
  template<>
    std::vector<ParameterSet> get<std::vector<ParameterSet> >( Entry const& );
}  // namespace edm

// ----------------------------------------------------------------------
// Bool, vBool

template<>
inline bool
edm::get<bool>( Entry const& e ) {
  return e.getBool();
}

// ----------------------------------------------------------------------
// Int32, vInt32

template<>
inline int
edm::get<int>( Entry const& e ) {
  return e.getInt32();
}

template<>
inline std::vector<int>
edm::get<std::vector<int> >( Entry const& e ) {
  return e.getVInt32();
}

// ----------------------------------------------------------------------
// Uint32, vUint32

template<>
inline unsigned int
edm::get<unsigned int>( Entry const& e ) {
  return e.getUInt32();
}

template<>
inline std::vector<unsigned int>
edm::get<std::vector<unsigned int> >( Entry const& e ) {
  return e.getVUInt32();
}

// ----------------------------------------------------------------------
// Double, vDouble

template<>
inline double
edm::get<double>( Entry const& e ) {
  return e.getDouble();
}

template<>
inline std::vector<double>
edm::get<std::vector<double> >( Entry const& e ) {
  return e.getVDouble();
}

// ----------------------------------------------------------------------
// String, vString

template<>
inline std::string
edm::get<std::string>( Entry const& e ) {
  return e.getString();
}

template<>
inline std::vector<std::string>
edm::get<std::vector<std::string> >( Entry const& e ) {
  return e.getVString();
}

// ----------------------------------------------------------------------
// ParameterSet, vPSet

template<>
inline edm::ParameterSet
edm::get<edm::ParameterSet>( Entry const& e ) {
  return e.getPSet();
}

template<>
inline std::vector<edm::ParameterSet>
edm::get<std::vector<edm::ParameterSet> >( Entry const& e ) {
  return e.getVPSet();
}

// ----------------------------------------------------------------------
// epilog

#endif  // ENTRY_T_H
