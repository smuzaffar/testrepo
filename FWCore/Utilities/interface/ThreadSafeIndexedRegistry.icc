#ifndef FWCore_Utilities_ThreadSafeIndexedRegistry_icc
#define FWCore_Utilities_ThreadSafeIndexedRegistry_icc

#include <vector>

namespace edm {
  namespace detail {
    static boost::mutex registry_mutex;

    template <typename T, typename E>
    ThreadSafeIndexedRegistry<T, E>*
    ThreadSafeIndexedRegistry<T, E>::instance() {
      static ThreadSafeIndexedRegistry<T, E> me;
      return &me;
    }

    template <typename T, typename E>
    void
    ThreadSafeIndexedRegistry<T, E>::getMapped(size_type k, value_type& result) const {
      boost::mutex::scoped_lock lock(registry_mutex);
      result = data_[k];
    }

    template <typename T, typename E>
    bool
    ThreadSafeIndexedRegistry<T, E>::insertMapped(value_type const& v) {
      boost::mutex::scoped_lock lock(registry_mutex);
      data_.push_back(v);
      return true;
    }
  } // namespace detail
} // namespace edm

#define DEFINE_THREAD_SAFE_INDEXED_REGISTRY_INSTANCE(X) \
  namespace edm { namespace detail { \
    template ThreadSafeIndexedRegistry<X::value_type,X::extra_type>* \
               ThreadSafeIndexedRegistry<X::value_type,X::extra_type>::instance(); \
    template void ThreadSafeIndexedRegistry<X::value_type,X::extra_type>::getMapped(X::size_type, X::value_type &) const; \
    template bool ThreadSafeIndexedRegistry<X::value_type,X::extra_type>::insertMapped(X::value_type const&); \
  }}

#endif //  FWCore_Utilities_ThreadSafeIndexedRegistry_icc
